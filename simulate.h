////////////////////////////////////////////////////////
// James Tobat
//
// File name: simulate.h
// Description: Header file for the simulate class
// Date: 12/11/13
//
#include <stdlib.h>
#include <iomanip>
#include <fstream>
#include <iostream>
#include <vector> //STL vector header file
#include <string>
#include <sstream> 

using namespace std;
//Represents each space on the map which contains
// a unit, terrain, and a city or road.
struct mapNode
{
bool unit;
char terrain;
int city;
};

//simUnit - represents cities/roads/armies in simulation
struct simUnit
{
int x;
int y;
int color;
};

//represents X,Y coordinates although they are technically
//RC or row and column coordinates, the output reflects this
//appropriately by reversing them.
struct coord
{
	int x;
	int y;
};

//simulate class - used to represent the bank simulation
class simulate
{
public:
// size of map, mapX is number of columns, mapY is number of rows
int mapX, mapY;
//Represents simulation map
vector < vector <mapNode> > map;
//Constructor-requires size of map
simulate(int mapsizeX, int mapsizeY);
//Creates a map based on output from map generation
void populateMap(ifstream& map);
//Populates all the required constants of the class
void parseConfig(ifstream& config);
//Runs the simulation to completion
void runSim();

private:
int currentTurn,numTurns; //Keeps track of current turn, and total turns
int numPlayers;//Total number of players in the game, only 2 for now
int maxArmies;//Maximum number of armies in the games
int p1armies,p2armies;//Tracks the number of armies generated by each player
int total_cities;//Total of cities that each player has
char plains, mountain, forest, ocean, river;//Representation of terrain types
int p1Color;//Color code which represents player1
int p2Color;//Color code which represents player2
ofstream output;//Output file that action list is written to

//Will find all adjacent spaces on the map at the given position
void findAdjacent(int x, int y,vector<coord>&adj);
//Represents all city units
vector <simUnit> city;
//Represents all road units
vector <simUnit> road;
//Represents all armies
vector <simUnit> army;
//Sets up the map with initial cities
void setup();
//Moves a unit from one place to another
void moveUnit(int x_old, int y_old, int x, int y);
//Destroys a unit at the specified location
void destroy(int layer, int x, int y);
//Creates a city/road or an army at the specified location
void create(int object, int x, int y, int color);
//Changes the color of a unit at the specified locoation
void color(int object, int x, int y, int color);
//Chooses the actions of each simulation unit (army,city,road)
void simTurn();
//Simulates all city/road actions
void simCities(int player);
//Simulates all army actions
void simArmies(int player);
//Prints error messages from simulation
void printError(int errorNum);
//Allows city at a specific coordinate to be found in city vector
//Either returns the coordinate or -1 if not found
int findCity(int x, int y);
//Allows road at a specific coordinate to be found in road vector
//Either returns the coordinate or -1 if not found
int findRoad(int x, int y);
//Allows army at a specific coordinate to be found in army vector
//Either returns the coordinate or -1 if not found
int findArmy(int x, int y);
};
